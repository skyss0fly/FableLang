}
            Expect(TokenType.RBRACKET, "Expected ']' to close map literal");
            return map;
        }
    }

    // Runtime values
    public abstract class Value { public abstract string Print(); }
    public class VNull : Value { public static readonly VNull Instance = new(); public override string Print() => "null"; }
    public class VNumber : Value { public double Num; public VNumber(double n) { Num = n; } public override string Print() => Num.ToString("0.########", CultureInfo.InvariantCulture); }
    public class VString : Value { public string Str; public VString(string s) { Str = s; } public override string Print() => Str; }
    public class VMap : Value
    {
        public Dictionary<string, Value> Fields = new(StringComparer.Ordinal);
        public override string Print()
        {
            var sb = new StringBuilder();
            sb.Append("[");
            bool first = true;
            foreach (var kv in Fields)
            {
                if (!first) sb.Append(", "); first = false;
                sb.Append("$").Append(kv.Key).Append(" = ").Append(kv.Value.Print());
            }
            sb.Append("]");
            return sb.ToString();
        }
    }

    public class VFunction : Value
    {
        public Func<List<Value>, Value> Impl;
        public VFunction(Func<List<Value>, Value> impl) { Impl = impl; }
        public override string Print() => "[function]";
    }

    public class Interpreter
    {
        private readonly Dictionary<string, Value> _env = new(StringComparer.Ordinal);

        public void LoadLibrary()
        {
            var mathMap = new VMap();
            mathMap.Fields["sqrt"] = new VFunction(args =>
            {
                if (args.Count != 1) throw new Exception("math.sqrt expects 1 argument");
                if (args[0] is VNumber n) return new VNumber(Math.Sqrt(n.Num));
                throw new Exception("math.sqrt expects a number");
            });
            mathMap.Fields["pow"] = new VFunction(args =>
            {
                if (args.Count != 2) throw new Exception("math.pow expects 2 arguments");
                if (args[0] is VNumber a && args[1] is VNumber b) return new VNumber(Math.Pow(a.Num, b.Num));
                throw new Exception("math.pow expects numbers");
            });
            _env["math"] = mathMap;
        }

        public void Execute(IEnumerable<Stmt> stmts)
        {
            foreach (var s in stmts) Exec(s);
        }

        private void Exec(Stmt s)
        {
            switch (s)
            {
                case StmtEcho e:
                    var v = Eval(e.Value);
                    Console.WriteLine(v.Print());
                    break;
                case StmtAssign a:
                    _env[a.Name] = Eval(a.Value);
                    break;
                default:
                    throw new Exception($"Unknown statement {s.GetType().Name}");
            }
        }

        private Value Eval(Expr e)
        {
            switch (e)
            {
                case ExprString es: return new VString(es.Value);
                case ExprNumber en: return new VNumber(en.Value);
                case ExprVarRef vr:
                    return _env.TryGetValue(vr.Name, out var v) ? v : VNull.Instance;
                case ExprPath p:
                    {
                        var baseVal = Eval(p.Base);
                        if (baseVal is VMap m && m.Fields.TryGetValue(p.Key, out var got)) return got;
                        return VNull.Instance;
                    }
                case ExprMap mm:
                    {
                        var vm = new VMap();
                        foreach (var (key, valExpr) in mm.Entries)
                        {
                            vm.Fields[key] = Eval(valExpr);
                        }
                        return vm;
                    }
                case ExprCall call:
                    {
                        var funcVal = Eval(call.Callee);
                        if (funcVal is VFunction f)
                        {
                            var args = call.Args.Select(Eval).ToList();
                            return f.Impl(args);
                        }
                        throw new Exception("Attempted to call a non-function");
                    }
                default:
                    throw new Exception($"Unknown expression {e.GetType().Name}");
            }
        }
    }

    public static class Program
    {
        public static void Main(string[] args)
        {
            if (args.Length == 0)
            {
                Console.WriteLine("FabLang v0.1 â€” usage: dotnet run -- <file.fab>");
                Console.WriteLine("Running demo...\n");
                var demo = "$word = \"Hello World\"\n" +
                           "echo $word\n" +
                           "$user = [$name = \"skyss0fly\", $age = 17]\n" +
                           "echo $user.$name\n" +
                           "echo math.sqrt(16)\n" +
                           "echo math.pow(2,3)";
                RunSource(demo);
                return;
            }

            var path = args[0];
            var src = File.ReadAllText(path);
            RunSource(src);
        }

        private static void RunSource(string src)
        {
            try
            {
                var lexer = new Lexer(src);
                var tokens = lexer.Tokenize();
                var parser = new Parser(tokens);
                var prog = parser.Parse();
                var interp = new Interpreter();
                interp.LoadLibrary();
                interp.Execute(prog);
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error: {ex.Message}");
            }
        }
    }
}
